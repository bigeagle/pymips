#see page 77.                           # meaning               |   ASM    | expected

34020002  # ori $2, $0, 2            ; 5: li $v0, 2 
34030003  # ori $3, $0, 3            ; 7: li $3, 3 
34040004  # ori $4, $0, 4            ; 8: li $4, 4 
34060006  # ori $6, $0, 6            ; 9: li $6, 6 
00433820  # add $7, $2, $3           ; 10: add $7, $v0, $v1 
00e42822  # sub $5, $7, $4           ; 11: sub $5, $7, $4 
00e21820  # add $3, $7, $2           ; 12: add $3, $7, $2 
00a52820  # add $5, $5, $5           ; 14: add $5, $5, $5 
10a2fffe  # beq $5, $2, -8 [loop-0x00400048]
00833820  # add $7, $4, $3           ; 16: add $7, $4, $3 
00a52822  # sub $5, $5, $5           ; 17: sub $5, $5, $5 
04b10001  # bgezal $5 4 [test-0x00400054]; 18: bgezal $5, test 
00c33820  # add $7, $6, $3           ; 19: add $7, $6, $3 
1ce0000b  # bgtz $7 44 [L1-0x0040005c]; 21: bgtz $7, L1 
00000000  # nop                      ; 22: nop 
1800000c  # blez $0 48 [L2-0x00400064]; 24: blez $0, L2 
00000000  # nop                      ; 25: nop 
3c01ffff  # lui $1, -1               ; 27: li $3, -1 
3423ffff  # ori $3, $1, -1           
1c60fffb  # bgtz $3 -20 [test2-0x00400074]; 28: bgtz $3, test2 
00000000  # nop                      ; 29: nop 
04600009  # bltz $3 36 [L3-0x0040007c]; 30: bltz $3, L3 
00000000  # nop                      ; 31: nop 
0470000a  # bltzal $3 40 [L4-0x00400084]; 33: bltzal $3, L4 
00000000  # nop                      ; 34: nop 
3408000b  # ori $8, $0, 11           ; 40: li $8, 11 
1000fff4  # beq $0, $0, -48 [test2-0x00400090]
00000000  # nop                      ; 42: nop 
3408000c  # ori $8, $0, 12           ; 44: li $8, 12 
1000fff3  # beq $0, $0, -52 [test3-0x0040009c]
00000000  # nop                      ; 46: nop 
3408000d  # ori $8, $0, 13           ; 48: li $8, 13 
1000fff6  # beq $0, $0, -40 [test4-0x004000a8]
00000000  # nop                      ; 50: nop 
3408000e  # ori $8, $0, 14           ; 52: li $8, 14 
00000000  # nop                      ; 54: nop 
00000000  # nop                      ; 56: nop 
00000000  # nop                      ; 57: nop 
00000000  # nop                      ; 58: nop 










#000000 00010 00011 00001 00000 100000   # add $r1, $r2, $r3     | r1 = 5 
#000000 00001 00101 00001 00000 100010   # sub $r1, $r1, $r5     | r5 = 0 
#000001 00001 10001  1111111111111111    # bgezal $1, -1         | r31 = 10
#000000 00100 00011 00010 00000 100000   # add $r2, $r4, $r3     | r2 = 7


#000000 00010 00011 00001 00000 100000   # add $r1, $r2, $r3     | r1 = 5 
#000000 00001 00100 00101 00000 100010   # sub $r5, $r1, $r4     | r5 = 1
#000000 00001 00010 00011 00000 100000   # add $r3, $r1, $r2     | r3 = 7
#000000 00101 00101 00101 00000 100000   # add $r5, $r5, $r5     | r5 = 2 ,4
#
#000100 00010 00101  1111111111111111    # beq r5, r2, -1        | next_ip = 3
#000000 00100 00011 00001 00000 100000   # add $r1, $r4, $r3     | r1 = 11
#000100 00100 00101  0000000000000010    # beq r5, r4, -1        | next_ip = 7
#000000 00110 00011 00001 00000 100000   # add $r1, $r6, $r3     | r1 = 13
#100011 00001 00101  0000000000000101    # lw $r5, 5($r1)        | r5 = 20 


#001000 00000 00101  0000000000000000    #
#001000 00101 00101  0000000000000100    # addi $r5, $r0, 4
#000100 00100 00101  1111111111111111    # beq r5, r4, -1        | next_ip = 3
#000000 00010 00010 00010 00000 100000   # add $r2, $r2, $r2     | r5 = 2 ,4
#100011 00001 00111  0000000000000101    # lw $r5, 5($r1)        | r5 = 20 
#100011 00001 01111  0000000000000101    # lw $r5, 5($r1)        | r5 = 20 

#000100 00100 00101  0000000000000010    # beq r5, r2, -1        | next_ip = 7
#000000 00100 00011 00001 00000 100000   # add $r1, $r4, $r3     | r1 = 5 
#100011 00001 00101  0000000000000101    # lw $r5, 5($r1)        | r5 = 20 

#100011 00000 00001  0000000000000000    # lw $r1, 0($r0)| r1 = 0
#001111 00001 00001  0000000000000001    # lui $1, 1     | r1 = 65536
#001101 00001 00001  0000111111000011    # ori $1, 4350  | r1 = 69571
#101011 00010 00001  0000000000000001    # sw $r1, 1($r2)| Mem[3] = 65971
#001100 00001 00001  0000000000000001    # andi $1, 1    | r1 = 1 

#001000 00001 00001  0000000000000101    # addi $r1, $r1, 5  | r1 = 6 
#001000 00001 00001  0000000000000101    # addi $r1, $r1, 5  | r1 = 6 
#001000 00001 00010  0000000000001101    # addi $r1, $r2, 13  | r1 = 19
#000000 00010 00011 00001 00000 100000   # add $r1, $r2, $r3     | r1 = 22
#100011 00001 00101  0000000000000101    # lw $r5, 5($r1)        | r5 = 54
#101011 00001 00001  0000000000000001    # sw $r1, 1($r1)        | Mem[7] = 22
#100011 00001 00100  0000000000000001    # lw $r4, 1($r1)        | r4 = 22
#
#001000 00001 00001  1111111111111111    # addi $r1, $r1, -1     | r1 = 21
#001001 00001 00001  1000000100000001    # addu $r1, $r1, -32511  | r1 = -32490
#001000 00001 00001  1000000100000001    # addi $r1, $r1, -32511 | r1 = -65001


#000000 00010 00011 00001 00000 100000   # add $r1, $r2, $r3     | r1 = 5 
#000000 00001 00100 00101 00000 100010   # sub $r5, $r1, $r4     | r5 = 1
#000000 00001 00010 00011 00000 100000   # add $r3, $r1, $r2     | r3 = 7
#000000 00101 00101 00101 00000 100000   # add $r5, $r5, $r5     | r5 = 2 ,4
#000100 00010 00101  1111111111111111    # beq r5, r2, -1        | next_ip = 3
#000100 00100 00101  0000000000000010    # beq r5, r2, -1        | next_ip = 7
#000000 00100 00011 00001 00000 100000   # add $r1, $r4, $r3     | r1 = 5 
#100011 00001 00101  0000000000000101    # lw $r5, 5($r1)        | r5 = 20 



#basic arithmetic  with RAW data hazard. (to test forwawding)  OK.
#000000 00010 00011 00001 00000 100000   # r1 = r2 + r3         | add $r1, $r2, $r3     | r1 = 5 
#000000 00001 00100 00101 00000 100010   # r5 = r1 - r4         | sub $r5, $r1, $r4     | r5 = 1
#
##read following load (to test hazard detector/stalls) . OK.
#100011 00001 00001  0000000000000101    # r1 = Mem[r1 + 5]     | lw $r1, 5($r1)        | r1 = 12




#100011 00001 00001  0000000000000101    # r1 = Mem[r1 + 5]     | lw $r1, 5($r1)        | r1 = 12
#000000 00001 00011 00001 00000 100000   # r1 = r2 + r3         | add $r1, $r1, $r3     | r1 = 5 


#000000 00010 00011 00001 00000 100000   # r1 = r2 + r3         | add $r1, $r2, $r3     | r1 = 5 
#101011 00001 00001  0000000000000101    # r1 = Mem[r1 + 5]     | sw $r1, 5($r1)        | Mem[17] = 12

#000000 00001 00110 00001 00000 100000   # r2 = r1 + r3         | add $r1, $r1, $r6     | r2 = 54
#000000 00000 00000 00000 00000 000000 #

#101011 00001 00010  0000000000000101    # r1 = Mem[r1 + 5]     | sw $r2, 5($r1)        | Mem[17] = 12



#100011 00001 00101  0000000000000101    # r1 = Mem[r1 + 5]     | lw $r5, 5($r1)        | r5 = 12
000000 00000 00000 00000 00000 000000 #
000000 00000 00000 00000 00000 000000 #
000000 00000 00000 00000 00000 000000 #
000000 00000 00000 00000 00000 000000 #
# branch (with control hazard). Ok
#000000 00001 00010 00011 00000 100000   # r3 = r1 + r2          | add $r3, $r1, $r2    | r3 = 59   (doesn't care really)
#000000 00001 00010 00011 00000 100000   # r3 = r1 + r2          | add $r3, $r1, $r2    | r3 = 59   (doesn't care really)
#000000 00001 00010 00011 00000 100000   # r3 = r1 + r2          | add $r3, $r1, $r2    | r3 = 59   (doesn't care really)
#000000 00001 00010 00011 00000 100000   # r3 = r1 + r2          | add $r3, $r1, $r2    | r3 = 59   (doesn't care really)
#000000 00001 00010 00011 00000 100000   # r3 = r1 + r2          | add $r3, $r1, $r2    | r3 = 59   (doesn't care really)
#000000 00001 00010 00011 00000 100000   # r3 = r1 + r2          | add $r3, $r1, $r2    | r3 = 59   (doesn't care really)
#000000 00001 00010 00011 00000 100000   # r3 = r1 + r2          | add $r3, $r1, $r2    | r3 = 59   (doesn't care really)
#000000 00001 00010 00011 00000 100000   # r3 = r1 + r2          | add $r3, $r1, $r2    | r3 = 59   (doesn't care really)
#000000 00001 00010 00011 00000 100000   # r3 = r1 + r2          | add $r3, $r1, $r2    | r3 = 59   (doesn't care really)
#000000 00001 00010 00011 00000 100000   # r3 = r1 + r2          | add $r3, $r1, $r2    | r3 = 59   (doesn't care really)
#000000 00001 00010 00011 00000 100000   # r3 = r1 + r2          | add $r3, $r1, $r2    | r3 = 59   (doesn't care really)
#000100 00100 00100  1111111111111111    # if(r4 == r4) go2 $-1  | beq r4, r4, -1       | next_ip = 0
#000000 00010 00011 00001 00000 100000   # r1 = r2 + r3          | add $r1, $r2, $r3     | instruction discarted
#000000 00001 00100 00101 00000 100010   # r5 = r1 - r4          | sub $r5, $r1, $r4     | instruction discarted

#load and store. OK
#101011 00001 00010  0000000000000101    # Mem[r1 + 5] = r2     | sw $r2, 5($r1)        | mem[7] = 3
#100011 00001 00000  0000000000000101    # r0 = Mem[r1 + 5]     | lw $r0, 5($r1)        | r0 = 3

#beq OK next_ip but fails when copy that to ip
#000000 00001 00010 00000 00000 100000   # r0 = r1 + r2          | add $r0, $r1, $r2    | r0 = 5 
#000100 00000 00100  1111111111111110    # if(r0 == r4) go2 $-2  | beq r0, r4, -2       | next_ip = 0

