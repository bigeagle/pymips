-- File: latch_id_ex.vhd
-- Generated by MyHDL 0.6
-- Date: Fri Nov 12 21:06:29 2010

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_06.all;

entity latch_id_ex is
    port (
        clk: in unsigned(0 downto 0);
        rst: in unsigned(0 downto 0);
        pc_adder_in: in signed (31 downto 0);
        data1_in: in signed (31 downto 0);
        data2_in: in signed (31 downto 0);
        address32_in: in signed (31 downto 0);
        rd_in: in unsigned(4 downto 0);
        rt_in: in unsigned(4 downto 0);
        func_in: in unsigned(5 downto 0);
        RegDst_in: in unsigned(0 downto 0);
        ALUop_in: in unsigned(0 downto 0);
        ALUSrc_in: in unsigned(0 downto 0);
        Branch_in: in unsigned(0 downto 0);
        MemRead_in: in unsigned(0 downto 0);
        MemWrite_in: in unsigned(0 downto 0);
        RegWrite_in: in unsigned(0 downto 0);
        MemtoReg_in: in unsigned(0 downto 0);
        pc_adder_out: out signed (31 downto 0);
        data1_out: out signed (31 downto 0);
        data2_out: out signed (31 downto 0);
        address32_out: out signed (31 downto 0);
        rd_out: out unsigned(4 downto 0);
        rt_out: out unsigned(4 downto 0);
        func_out: out unsigned(5 downto 0);
        RegDst_out: out unsigned(0 downto 0);
        ALUop_out: out unsigned(0 downto 0);
        ALUSrc_out: out unsigned(0 downto 0);
        Branch_out: out unsigned(0 downto 0);
        MemRead_out: out unsigned(0 downto 0);
        MemWrite_out: out unsigned(0 downto 0);
        RegWrite_out: out unsigned(0 downto 0);
        MemtoReg_out: out unsigned(0 downto 0)
    );
end entity latch_id_ex;

architecture MyHDL of latch_id_ex is


begin


LATCH_ID_EX_LATCH: process (clk, rst) is
begin
    if (rst = 1) then
        pc_adder_out <= "00000000000000000000000000000000";
        data1_out <= "00000000000000000000000000000000";
        data2_out <= "00000000000000000000000000000000";
        address32_out <= "00000000000000000000000000000000";
        rt_out <= "00000";
        rd_out <= "00000";
        func_out <= "000000";
        RegDst_out <= "0";
        ALUop_out <= "0";
        ALUSrc_out <= "0";
        Branch_out <= "0";
        MemRead_out <= "0";
        MemWrite_out <= "0";
        RegWrite_out <= "0";
        MemtoReg_out <= "0";
    elsif rising_edge(clk) then
        pc_adder_out <= pc_adder_in;
        data1_out <= data1_in;
        data2_out <= data2_in;
        address32_out <= address32_in;
        rt_out <= rt_in;
        rd_out <= rd_in;
        func_out <= func_in;
        RegDst_out <= RegDst_in;
        ALUop_out <= ALUop_in;
        ALUSrc_out <= ALUSrc_in;
        Branch_out <= Branch_in;
        MemRead_out <= MemRead_in;
        MemWrite_out <= MemWrite_in;
        RegWrite_out <= RegWrite_in;
        MemtoReg_out <= MemtoReg_in;
    end if;
end process LATCH_ID_EX_LATCH;

end architecture MyHDL;
