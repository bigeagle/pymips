// File: alu_control.v
// Generated by MyHDL 0.7
// Date: Fri Dec 21 21:11:27 2012

module alu_control (
    aluop,
    branch,
    funct_field,
    front_sel,
    control_out
);


input [4:0] aluop;
input [0:0] branch;
input [5:0] funct_field;
output [0:0] front_sel;
reg [0:0] front_sel;
output [2:0] control_out;
reg [2:0] control_out;

`include "alu_code.v"

always @(aluop, funct_field, branch) begin: ALU_CONTROL_LOGIC
    if ((branch == 1)) begin
        front_sel = 1;
        control_out = ALU_SUB;
    end
    else begin
        case (aluop)
            ALU_OP_NOP: begin
                control_out = ALU_ADD;
                front_sel = 1;
            end
            ALU_OP_ADD: begin
                control_out = ALU_ADD;
                front_sel = 1;
            end
            ALU_OP_SLT: begin
                control_out = ALU_SLT;
                front_sel = 1;
            end
            ALU_OP_LUI: begin
                control_out = ALU_ADD;
                front_sel = 1;
            end
            ALU_OP_ORI: begin
                control_out = ALU_OR;
                front_sel = 1;
            end
            ALU_OP_ANDI: begin
                control_out = ALU_AND;
                front_sel = 1;
            end
            ALU_OP_RFORMAT: begin
                case (funct_field)
                    'h22: begin
                        control_out = ALU_SUB;
                        front_sel = 1;
                    end
                    'h23: begin
                        control_out = ALU_SUB;
                        front_sel = 1;
                    end
                    'h24: begin
                        control_out = ALU_AND;
                        front_sel = 1;
                    end
                    'h25: begin
                        control_out = ALU_OR;
                        front_sel = 1;
                    end
                    'h2a: begin
                        control_out = ALU_SLT;
                        front_sel = 1;
                    end
                    'h18: begin
                        control_out = ALU_ADD;
                        front_sel = 0;
                    end
                    'h19: begin
                        control_out = ALU_ADD;
                        front_sel = 0;
                    end
                    'h10: begin
                        control_out = ALU_ADD;
                        front_sel = 0;
                    end
                    'h12: begin
                        control_out = ALU_ADD;
                        front_sel = 0;
                    end
                    'h1a: begin
                        control_out = ALU_ADD;
                        front_sel = 0;
                    end
                    'h1b: begin
                        control_out = ALU_ADD;
                        front_sel = 0;
                    end
                    default: begin
                        control_out = ALU_ADD;
                        front_sel = 1;
                    end
                endcase
            end
        endcase
    end
end

endmodule
