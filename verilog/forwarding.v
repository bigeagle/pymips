// File: forwarding.v
// Generated by MyHDL 0.7
// Date: Sat Dec 22 14:47:16 2012


`timescale 1ns/10ps

module forwarding (
    RegWrite_mem,
    Rd_mem,
    Rs_ex,
    Rt_ex,
    RegWrite_wb,
    Rd_wb,
    ForwardA,
    ForwardB
);
// Detects and controls forwarding for 2 pairs of data hazard conditions:
// 
// 1a. Rd_mem = Rs_ex
// 1b. Rd_mem = Rt_ex
// 
// 2a. Rd_wb = Rs_ex
// 2b. Rd_wb = Rt_ex

input [0:0] RegWrite_mem;
input [4:0] Rd_mem;
input [4:0] Rs_ex;
input [4:0] Rt_ex;
input [0:0] RegWrite_wb;
input [4:0] Rd_wb;
output [1:0] ForwardA;
reg [1:0] ForwardA;
output [1:0] ForwardB;
reg [1:0] ForwardB;






always @(Rs_ex, Rd_wb, RegWrite_wb, RegWrite_mem, Rt_ex, Rd_mem) begin: FORWARDING_HAZARDS_CONTROL
    if (((RegWrite_mem == 1) && (Rd_mem != 0) && (Rd_mem == Rs_ex))) begin
        ForwardA = 2;
    end
    else if (((RegWrite_wb == 1) && (Rd_wb != 0) && (Rd_mem != Rs_ex) && (Rd_wb == Rs_ex))) begin
        ForwardA = 1;
    end
    else if (((RegWrite_wb == 1) && (RegWrite_mem == 0) && (Rd_wb != 0) && (Rd_wb == Rs_ex))) begin
        ForwardA = 1;
    end
    else begin
        ForwardA = 0;
    end

    if (((RegWrite_mem == 1) && (Rd_mem != 0) && (Rd_mem == Rt_ex))) begin
        ForwardB = 2;
    end
    else if (((RegWrite_wb == 1) && (Rd_wb != 0) && (Rd_mem != Rt_ex) && (Rd_wb == Rt_ex))) begin
        ForwardB = 1;
    end
    else if (((RegWrite_wb == 1) && (RegWrite_mem == 0) && (Rd_wb != 0) && (Rd_wb == Rt_ex))) begin
        ForwardB = 1;
    end
    else begin
        ForwardB = 0;
    end
end

endmodule
