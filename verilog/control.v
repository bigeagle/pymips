// File: control.v
// Generated by MyHDL 0.7
// Date: Fri Dec 21 21:36:23 2012

`include "alu_code.v"
`timescale 1ns/10ps

module control (
    opcode,
    Rt,
    func,
    RegDst,
    Branch,
    Jump,
    MemRead,
    MemtoReg,
    ALUop,
    MemWrite,
    ALUSrc,
    RegWrite,
    NopSignal,
    Stall
);
// opcode -- 6bit opcode field from instruction
// RegDst, ALUSrc, MemtoReg -- 1bit signals to control multiplexors
// ALUSrc -- 1: Immediate Num, 0: Register/Forwarded
// RegWrite, MemRead, MemWrite -- 1bit signals to control reads and writes
//                                in registers and memory
// Branch -- 1bit signal to determining whether to possibly branch
// ALUop -- 2bit control signal for the ALU
// Signed -- whether immediate num is extended signed or unsigned

input [5:0] opcode;
input [4:0] Rt;
input [5:0] func;
output [0:0] RegDst;
reg [0:0] RegDst;
output [0:0] Branch;
reg [0:0] Branch;
output [0:0] Jump;
reg [0:0] Jump;
output [1:0] MemRead;
reg [1:0] MemRead;
output [0:0] MemtoReg;
reg [0:0] MemtoReg;
output [4:0] ALUop;
reg [4:0] ALUop;
output [1:0] MemWrite;
reg [1:0] MemWrite;
output [0:0] ALUSrc;
reg [0:0] ALUSrc;
output [0:0] RegWrite;
reg [0:0] RegWrite;
input [0:0] NopSignal;
input [0:0] Stall;

always @(Rt, NopSignal, Stall, opcode, func) begin: CONTROL_LOGIC
    if (((NopSignal == 1) || (Stall == 1))) begin
        RegDst = 0;
        ALUSrc = 0;
        MemtoReg = 0;
        RegWrite = 0;
        MemRead = 0;
        MemWrite = 0;
        Branch = 0;
        Jump = 0;
        ALUop = ALU_OP_NOP;
    end
    else begin
        case (opcode)
            'h0:  begin
                case (func)
                    'h8: begin
                        RegDst = 0;
                        ALUSrc = 0;
                        MemtoReg = 0;
                        RegWrite = 0;
                        MemRead = 0;
                        MemWrite = 0;
                        Branch = 1;
                        Jump = 1;
                        ALUop = ALU_OP_JR;
                    end
                    'h9: begin
                        RegDst = 0;
                        ALUSrc = 0;
                        MemtoReg = 0;
                        RegWrite = 1;
                        MemRead = 0;
                        MemWrite = 0;
                        Branch = 1;
                        Jump = 1;
                        ALUop = ALU_OP_JALR;
                    end
                    default: begin
                        RegDst = 1;
                        ALUSrc = 0;
                        MemtoReg = 0;
                        RegWrite = 1;
                        MemRead = 0;
                        MemWrite = 0;
                        Branch = 0;
                        Jump = 0;
                        ALUop = ALU_OP_RFORMAT;
                    end
                endcase
            end
            'h8: begin
                RegDst = 0;
                ALUSrc = 1;
                MemtoReg = 0;
                RegWrite = 1;
                MemRead = 0;
                MemWrite = 0;
                Branch = 0;
                Jump = 0;
                ALUop = ALU_OP_ADD;
            end
            'h9: begin
                RegDst = 0;
                ALUSrc = 1;
                MemtoReg = 0;
                RegWrite = 1;
                MemRead = 0;
                MemWrite = 0;
                Branch = 0;
                Jump = 0;
                ALUop = ALU_OP_ADD;
            end
            'hf: begin
                RegDst = 0;
                ALUSrc = 1;
                MemtoReg = 0;
                RegWrite = 1;
                MemRead = 0;
                MemWrite = 0;
                Branch = 0;
                Jump = 0;
                ALUop = ALU_OP_LUI;
            end
            'hd begin
                RegDst = 0;
                ALUSrc = 1;
                MemtoReg = 0;
                RegWrite = 1;
                MemRead = 0;
                MemWrite = 0;
                Branch = 0;
                Jump = 0;
                ALUop = ALU_OP_ORI;
            end
            'hc: begin
                RegDst = 0;
                ALUSrc = 1;
                MemtoReg = 0;
                RegWrite = 1;
                MemRead = 0;
                MemWrite = 0;
                Branch = 0;
                Jump = 0;
                ALUop = ALU_OP_ANDI;
            end
            'h23: begin
                RegDst = 0;
                ALUSrc = 1;
                MemtoReg = 1;
                RegWrite = 1;
                MemRead = 3;
                MemWrite = 0;
                Branch = 0;
                Jump = 0;
                ALUop = ALU_OP_ADD;
            end
            'h20: begin
                RegDst = 0;
                ALUSrc = 1;
                MemtoReg = 1;
                RegWrite = 1;
                MemRead = 1;
                MemWrite = 0;
                Branch = 0;
                Jump = 0;
                ALUop = ALU_OP_ADD;
            end
            'h2b: begin
                ALUSrc = 1;
                RegWrite = 0;
                MemRead = 0;
                MemWrite = 3;
                Branch = 0;
                Jump = 0;
                ALUop = ALU_OP_ADD;
            end
            'h4: begin
                RegDst = 0;
                ALUSrc = 0;
                RegWrite = 0;
                MemRead = 0;
                MemWrite = 0;
                Branch = 1;
                Jump = 0;
                ALUop = ALU_OP_BEQ;
            end
            'h5: begin
                RegDst = 0;
                ALUSrc = 0;
                RegWrite = 0;
                MemRead = 0;
                MemWrite = 0;
                Branch = 1;
                Jump = 0;
                ALUop = ALU_OP_BNE;
            end
            'h1: begin
                RegDst = 0;
                ALUSrc = 0;
                MemRead = 0;
                MemWrite = 0;
                Branch = 1;
                Jump = 0;
                case (Rt)
                    'h1: begin
                        ALUop = ALU_OP_BGEZ;
                        RegWrite = 0;
                    end
                    'h11: begin
                        ALUop = ALU_OP_BGEZAL;
                        RegWrite = 1;
                    end
                    'h0: begin
                        ALUop = ALU_OP_LTZ;
                        RegWrite = 0;
                    end
                    'h10: begin
                        ALUop = ALU_OP_LTZAL;
                        RegWrite = 1;
                    end
                endcase
            end
            'h7: begin
                ALUSrc = 0;
                RegWrite = 0;
                MemRead = 0;
                MemWrite = 0;
                Branch = 1;
                Jump = 0;
                if ((Rt == 0)) begin
                    ALUop = ALU_OP_BGTZ;
                end
            end
            'h6: begin
                ALUSrc = 0;
                RegWrite = 0;
                MemRead = 0;
                MemWrite = 0;
                Branch = 1;
                Jump = 0;
                if ((Rt == 0)) begin
                    ALUop = ALU_OP_BLEZ;
                end
            end
            'h2: begin
                ALUSrc = 0;
                RegWrite = 0;
                MemRead = 0;
                MemWrite = 0;
                Branch = 0;
                Jump = 1;
                ALUop = ALU_OP_J;
            end
            'h3: begin
                ALUSrc = 0;
                RegWrite = 1;
                MemRead = 0;
                MemWrite = 0;
                Branch = 0;
                Jump = 1;
                ALUop = ALU_OP_J;
            end
            'ha: begin
                RegDst = 0;
                ALUSrc = 1;
                MemtoReg = 0;
                RegWrite = 1;
                MemRead = 0;
                MemWrite = 0;
                Branch = 0;
                Jump = 0;
                ALUop = ALU_OP_SLT;
            end
        endcase
    end
end

endmodule
