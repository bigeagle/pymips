// File: branch_judge.v
// Generated by MyHDL 0.7
// Date: Sat Dec 22 14:50:34 2012


`timescale 1ns/10ps

module branch_judge (
    clk,
    ALUop,
    branch,
    jump,
    zero,
    positive,
    out
);
// clk: clock
// ALUop: BEQ, BGEZ, BGEZL, BGTZ, BLEZ, BLTZ, BLTZAL, BNE
// zero: is ALU result zero?
// positive: is ALU result positive?
// out: judgement

input [0:0] clk;
input [4:0] ALUop;
input [0:0] branch;
input [0:0] jump;
input [0:0] zero;
input [0:0] positive;
output [0:0] out;
reg [0:0] out;
`include "alu_code.v"

always @(negedge clk) begin: BRANCH_JUDGE_LOGIC
    if ((jump == 1)) begin
        out <= 1;
    end
    else if ((branch == 1)) begin
        case (ALUop)
            ALU_OP_BEQ: begin
                out <= zero;
            end
            ALU_OP_BNE: begin
                out <= (~zero);
            end
            ALU_OP_BGEZ: begin
                out <= positive;
            end
            ALU_OP_BGEZAL: begin
                out <= positive;
            end
            ALU_OP_BLTZ: begin
                out <= (~positive);
            end
            ALU_OP_BLTZAL: begin
                out <= (~positive);
            end
            ALU_OP_BGTZ: begin
                out <= (positive & (~zero));
            end
            ALU_OP_BLEZ: begin
                out <= ((~positive) | zero);
            end
        endcase
    end
    else begin
        out <= 0;
    end
end

endmodule
