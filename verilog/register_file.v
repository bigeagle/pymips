// File: register_file.v
// Generated by MyHDL 0.7
// Date: Sat Dec 22 14:31:17 2012


`timescale 1ns/10ps

module register_file (
    clk,
    reset,
    read_reg1,
    read_reg2,
    write_reg,
    data_in,
    write_control,
    out_data1,
    out_data2
);


input [0:0] clk;
input reset;
input [4:0] read_reg1;
input [4:0] read_reg2;
input [4:0] write_reg;
input signed [31:0] data_in;
input [0:0] write_control;
output signed [31:0] out_data1;
reg signed [31:0] out_data1;
output signed [31:0] out_data2;
reg signed [31:0] out_data2;


reg signed [31:0] mem [0:32-1];
integer j;

always @(negedge clk) begin: REGISTER_FILE_LOGIC
    mem[0] <= 0;
    if (((write_control == 1) && (write_reg != 0))) begin
        mem[write_reg] <= data_in;
        if ((read_reg1 == write_reg)) begin
            out_data1 <= data_in;
        end
        else begin
            out_data1 <= mem[read_reg1];
        end
        if ((read_reg2 == write_reg)) begin
            out_data2 <= data_in;
        end
        else begin
            out_data2 <= mem[read_reg2];
        end
    end
    else begin
        out_data1 <= mem[read_reg1];
        out_data2 <= mem[read_reg2];
    end
end

always @(posedge reset) begin
    out_data1 <= 0;
    out_data2 <= 0;
    for(j=0; j<32; j=j+1) begin
        mem[j] <= 0;
    end
end

endmodule
