// File: ALU.v
// Generated by MyHDL 0.7
// Date: Fri Dec 21 21:05:37 2012

module ALU (
    control,
    op1,
    op2,
    out_,
    zero,
    positive
);
// control : 4 bit control/selector vector.
// op1: operator 1. 32bits
// op2: operator 2. 32bits
// out: ALU result. 32bits
// zero: zero detector. ``1`` when out is 0.

input [2:0] control;
input signed [31:0] op1;
input signed [31:0] op2;
output signed [31:0] out_;
reg signed [31:0] out_;
output zero;
reg zero;
output positive;
reg positive;

`include "alu_code.v"


always @(control, op1, op2) begin: ALU_LOGIC_ALU
    case (control)
        ALU_AND: begin
            out_ = (op1 & op2);
        end
        ALU_OR: begin
            out_ = (op1 | op2);
        end
        ALU_ADD: begin
            out_ = (op1 + op2);
        end
        ALU_SUB: begin
            out_ = (op1 - op2);
        end
        ALU_SLT: begin
            if ((op1 < op2)) begin
                out_ = 1;
            end
            else begin
                out_ = 0;
            end
        end
        ALU_NOR: begin
            out_ = (~(op1 | op2));
        end
    endcase
end


always @(out_) begin: ALU_ZERO_DETECTOR
    if ((out_ == 0)) begin
        zero = 1;
    end
    else begin
        zero = 0;
    end
end


always @(out_) begin: ALU_POSITIVE_DETECTOR
    if ((out_ >= 0)) begin
        positive = 1;
    end
    else begin
        positive = 0;
    end
end

endmodule
