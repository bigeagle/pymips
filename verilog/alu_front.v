// File: alu_front.v
// Generated by MyHDL 0.7
// Date: Fri Dec 21 20:31:39 2012


`timescale 1ns/10ps

module alu_front (
    clk,
    aluop,
    func,
    shamt,
    op1,
    op2,
    out_1,
    out_2
);
// aluop : ALU operation vector.
// op1: operator 1. 32bits
// op2: operator 2. 32bits
// out_1: data send to ALU
// out_2: data send to ALU

input [0:0] clk;
input [4:0] aluop;
input [5:0] func;
input [4:0] shamt;
input signed [31:0] op1;
input signed [31:0] op2;
output signed [31:0] out_1;
reg signed [31:0] out_1;
output signed [31:0] out_2;
reg signed [31:0] out_2;

reg signed [31:0] LO;
reg signed [31:0] HI;

`include "alu_code.v"

always @(negedge clk) begin: ALU_FRONT_LOGIC
    reg [64-1:0] tmp;
    if (aluop == ALU_OP_RFORMAT) begin
        case (func)
            'h18: begin
                out_1 <= 0;
                out_2 <= 0;
                tmp = (op1 * op2);
                HI <= $signed(tmp[64-1:32]);
                LO <= $signed(tmp[32-1:0]);
            end
            'h19: begin
                out_1 <= 0;
                out_2 <= 0;
                tmp = (op1 * op2);
                HI <= $signed(tmp[64-1:32]);
                LO <= $signed(tmp[32-1:0]);
            end
            'h10: begin
                out_1 <= 0;
                out_2 <= HI;
            end
            'h12: begin
                out_1 <= 0;
                out_2 <= LO;
            end
            'h1a: begin
                out_1 <= 0;
                out_2 <= 0;
                HI <= (op1 % op2);
                LO <= (op1 / op2);
            end
            'h1b: begin
                out_1 <= 0;
                out_2 <= 0;
                HI <= (op1 % op2);
                LO <= (op1 / op2);
            end
        endcase
    end
    else begin
        out_1 <= op1;
        out_2 <= op2;
    end
end

endmodule
